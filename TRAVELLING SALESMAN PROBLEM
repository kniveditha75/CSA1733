# Travelling Salesman Problem using Depth First Search (DFS)

from itertools import permutations

def calculate_distance(route, distance_matrix):
    total_distance = 0
    for i in range(len(route) - 1):
        total_distance += distance_matrix[route[i]][route[i + 1]]
    total_distance += distance_matrix[route[-1]][route[0]]  # Return to starting point
    return total_distance

def travelling_salesman_dfs(distance_matrix):
    n = len(distance_matrix)
    min_distance = float('inf')
    best_route = []

    for perm in permutations(range(n)):
        current_distance = calculate_distance(perm, distance_matrix)
        if current_distance < min_distance:
            min_distance = current_distance
            best_route = perm

    return best_route, min_distance

# Example distance matrix
distance_matrix = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

best_route, min_distance = travelling_salesman_dfs(distance_matrix)
print("Best Route:", best_route)
print("Minimum Distance:", min_distance)
